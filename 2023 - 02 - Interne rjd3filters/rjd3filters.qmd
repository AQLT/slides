---
title: "rjd3filters"
lang: fr
format:
  revealjs:
    slide-number: c/t
    slide-level: 3
    smaller: true
    #theme: solarized
error: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE,
                      out.width = "90%")
```

## Introduction

`rjd3filters` est un package expérimental autour de JD+ 3.0 qui permet la manipulation de moyennes mobiles utilisées dans X-11 :

- Permet d'étudier différentes méthodes pour l'extraction de la tendance-cycle et leur intégration dans X-11 et analyser des dernières estimations (`implicit_forecasts()`) : voir notamment présentation aux [SAPW](https://aqlt.github.io/slides/2022%20-%2006%20-%20SAPW/Slides_AQLT.pdf)

- Différentes fonctions annexes ont été implémentées pour manipuler :

    - Les moyennes mobiles (`moving_average()`)
    - Les filtres (`finite_filters`) : une `moving_average()` centrale ainsi qu'un ensemble de `moving_average()` utilisées pour les premières (`lfilters`) et dernières (`rfilters`) estimations.
    
## Estimation en TR de la TC (1)

Différentes fonctions :

- `lp_filter()` local polynomial filters of Proietti and Luati (2008) (including Musgrave): Henderson, Uniform, biweight, Trapezoidal, Triweight, Tricube, "Gaussian", Triangular, Parabolic (= Epanechnikov)  
- `rkhs_filter()` Reproducing Kernel Hilbert Space (RKHS) of Dagum and Bianconcini (2008) with same kernels  
- `fst_filter()` FST approach of Grun-Rehomme, Guggemos, and Ladiray (2018)  
- `dfa_filter()` derivation of AST approach of Wildi and McElroy (2019)

## Estimation en TR de la TC (2)

```{r}
library(rjd3filters)
y <- window(retailsa$AllOtherGenMerchandiseStores, start = 2005)
musgrave_f <- lp_filter(horizon = 6, kernel = "Henderson",endpoints = "LC")
# L'objet java est ici stocké pour pouvoir extraire certains caractéristiques, utile ?
names(musgrave_f)
# uniquement coefficients affichés de q=0 à q=6, inverser ? voir finite_filters
musgrave_f
```
## Estimation en temps réel de la tendance-cycle (3)

```{r}
#| out-width: 90%
plot_coef(musgrave_f, q=c(0, 1, 2, 6), zeroAsNa = TRUE)
```

```{r}
# Pour appliquer :
jfilter(y, musgrave_f$filters.coef) |> round()
```

## Moyennes mobiles

La fonction `moving_average()` permet de créer des moyennes mobiles avec :
```{r}
M3 <- moving_average(rep(1/3, 3), lags = -1)
M3X3 <- M3 * M3 # ou M3 ^2
coef(M3X3)
M3X3[c(1,3)] # donne encore une moyenne mobile
M3[3] <- 1
M3
1 - M3X3
sum(M3X3)
rev(moving_average(rep(1/3, 3), lags = -2)) # pour inverser
is_symmetric(M3X3)
# Pour avoir une MM que l'on applique à chaque période, ex: tous les trim
to_seasonal(M3X3, 4)
```

## Moyennes mobiles (2)

```{r}
is_symmetric(M3X3)
# Pour avoir une MM que l'on applique à chaque période, ex: tous les mois
to_seasonal(M3X3, 12)
```

```{r}
plot_gain(M3X3, main = "M3X3 applied to each month")
plot_gain(to_seasonal(M3X3, 12), main = "M3X3 applied to the global series")
```

## Filtres (1)

`finite_filters` une `moving_average()` centrale ainsi qu'un ensemble de `moving_average()` utilisées pour les premières (`lfilters`) et dernières (`rfilters`) estimations.

```{r}
#| error: true
M = finite_filters(sfilter = moving_average(rep(1, 3),-1)/3, 
               rfilters = list(moving_average(rep(1, 2),-1)/2))
M
M[1,1] # ce n'est pas une matrice
as.matrix(M) # ici oui
```


## Filtres (2)

```{r}
M3X3 <- macurves("S3X3")
# quels noms pour les premiers filtres ?
as.matrix(M3X3, lfilters = TRUE)
m_f <- finite_filters(musgrave_f)
round(as.matrix(m_f), 3)
m_f * y
```

## Filtres (3)

```{r}
# On peut facilement combiner les moyennes mobiles
as.matrix(M3X3 * m_f) |> round(3)
all.equal((M3X3 * m_f) * y, M3X3 * (m_f * y))
```

## X-11 (1)

```{r}
library(rjd3filters)
y = rjd3toolkit::ABS$X0.2.09.10.M
compare <- function(x, id){
  res = cbind(na.omit(x), extract(id))
  all.equal(res[,1], res[,2])
}
extract <- function(id, x = x11_step){
  rjd3toolkit:::.proc_vector(x$java, id)
}
x11_step = rjd3filters::x11(y = y, trend.coefs = lp_filter(horizon = 6,ic = 3.5)$filters.coef,
                            extreme.lsig = 300, extreme.usig = 400, mul = FALSE,
                            seas.s0 = "S3X3",
                            seas.s1 = "S3X5")
compare(y, "b1")
e1 <- simple_ma(12, - 6)
e2 <- simple_ma(12, - 5)
e1
# used to have the 1rst estimate of the trend
tc_1 <- M2X12 <- (e1 + e2)/2
coef(M2X12) |> round(3)
compare(M2X12 * y, "b2")
si_1 <- 1 - tc_1
compare(si_1 * y, "b3")

M3X3 <- macurves("S3x3")
M3X3_s <- to_seasonal(M3X3, 12)
```

## X-11 (2)

```{r}
s_1 = M3X3_s * si_1
s_1_norm = M2X12 * s_1
s_1_norm = imput_last_obs(s_1_norm, n = 6, nperiod = 1)
s_1_demean = s_1 - s_1_norm
s_1_f = imput_last_obs(s_1_demean, n = 6, nperiod = 12)
compare(s_1_f * y, "b5")
sa_1 = 1- s_1_f
compare(sa_1 * y, "b6")

h13 = finite_filters(lp_filter(ic = 3.5))
tc_2 = h13 * sa_1
compare(tc_2 * y, "b7")

si_2 <- 1 - tc_2
compare(si_2 * y, "b8")

M3X5 <- macurves("S3x5")
M3X5_s <- to_seasonal(M3X5, 12)
s_2 = M3X5_s * si_2
s_2_norm = M2X12 * s_2
s_2_norm = imput_last_obs(s_2_norm, n = 6, nperiod = 1)
s_2_demean = s_2 - s_2_norm
s_2_f = imput_last_obs(s_2_demean, n = 6, nperiod = 12)
compare(s_2_f * y, "b10")
sa_2 = 1- s_2_f
compare(sa_2 * y, "b11")
```

